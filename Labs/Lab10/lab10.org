#+title: Lab 10 (Runge-Kutta and multi-step method)
#+description: 
#+PROPERTY: header-args :tangle ./lab10.py :padline 2

* Header
#+begin_src python :results output :session :padline 0
import matplotlib.pyplot as plt
import numpy as np
#+end_src

#+RESULTS:


* Lab 9 methods

** Header
#+begin_src python :results output :session
## Lab 9 copied methods
#+end_src


** Linear interpolation

#+begin_src python :results output :session
def linear_interpolation(data_set):
    """ Takes a list of data points in form of tuple coordinates, that is:
    [(x0, y0), (x1, y1) ...] and returns an apporixmated function given by
    linear interpolation.
    """
    if len(data_set) <= 1:
        raise ValueError("<linear_interpolation: not enough data points>")
        
    data_set_sorted = sorted(data_set)
    if len(data_set_sorted) == 2:
        (x0, y0), (x1, y1) = data_set_sorted
        k = (y1 - y0) / (x1 - x0)
        m = y0
        interpolated_function = lambda x: k * (x - x0) + m
        return interpolated_function
    else:
        head = data_set_sorted[:2]
        head_interval_end = head[1][0] 
        tail = data_set_sorted[1:]
        head_function = linear_interpolation(head)
        tail_function = linear_interpolation(tail)
        complete_function = lambda x:( head_function(x) if x <= head_interval_end
                                       else tail_function(x))
        return complete_function
        
#+end_src

#+RESULTS:

*** Linear interpolation test
#+begin_src python :results output :session :tangle no
data = [(0,0), (1,1), (2,4)]
fun = linear_interpolation(data)
print(fun(1.3))

plot_function(fun, (0,5))
#+end_src

#+RESULTS:
: 1.9000000000000001


** Linear interpolation vector
#+begin_src python :results output :session
def linear_interpolation_vector(data_set, query_points):
    """ Transforms the the query_points list from the format of 
    [x1,x2,x3...] to [f(x1), f(x2), f(x3) ...],
    where f is the linearly interpolated function from data_set.
    """
    f = linear_interpolation(data_set)
    return list(map(f,query_points))
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
data_set = [(1,1), (2,4), (3,9)]
query_points = [-1, 3, 4]
print(linear_interpolation_vector(data_set, query_points))
#+end_src

#+RESULTS:
: [-5.0, 9.0, 14.0]


** Euler's method
#+begin_src python :results output :session
def euler_method(derivative, initial_value, stepsize):
    """ Given that 'derivative' is a function of (x,y)
    and that the 'initial_value' is a tuple of the form
    (x0, y(x0)), this method returns a function that
    approximates y in the equation dy/dx = derivative(x,y).
    """
    step_to_goal = lambda x, goal: x+stepsize if x < goal else x - stepsize
    y_next = lambda x, y, goal: (y + stepsize * derivative(x,y) if x < goal
                                 else y - stepsize * derivative(x,y) )


    def y(x):
        x0, y0 = initial_value
        xk, yk = x0, y0
        while x0 <= xk < x or x0 >= xk > x:
            xk = step_to_goal(xk, x)
            yk = y_next(xk, yk, x)
        return yk

    
    return y
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
f = euler_method(lambda x,y: y, (0,1), 0.1)
print(f(1))
print("ello")
#+end_src

#+RESULTS:
: 2.33436821409
: ello


* Assignment 1

** Problem 1 header
#+begin_src python :results output :session
## Problem 1: analytic data of function
problem_1_analytic_function = lambda t: -1 / t
problem_1_derivative = lambda t,y: (1 / t **2) - (y / t) - y ** 2
problem_1_x_values = np.linspace(1, 2, int(1 / 0.05))
problem_1_initial_value = (1,-1)
problem_1_y_values = list(map(problem_1_analytic_function, problem_1_x_values))
problem_1_data = list(zip(problem_1_x_values, problem_1_y_values))
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
print("problem_1_analytic_function:", problem_1_analytic_function)
print("problem_1_x_values:", problem_1_x_values)
print("problem_1_initial_value:", problem_1_initial_value)
#print("problem_1_y_values:", problem_1_y_values)
print("problem_1_data:", problem_1_data)
#+end_src

#+RESULTS:
: problem_1_analytic_function: <function <lambda> at 0x7f4002de1820>
: problem_1_x_values: [1.         1.05263158 1.10526316 1.15789474 1.21052632 1.26315789
:  1.31578947 1.36842105 1.42105263 1.47368421 1.52631579 1.57894737
:  1.63157895 1.68421053 1.73684211 1.78947368 1.84210526 1.89473684
:  1.94736842 2.        ]
: problem_1_initial_value: (1, -1)
: problem_1_data: [(1.0, -1.0), (1.0526315789473684, -0.9500000000000001), (1.1052631578947367, -0.9047619047619049), (1.1578947368421053, -0.8636363636363636), (1.2105263157894737, -0.8260869565217391), (1.263157894736842, -0.7916666666666667), (1.3157894736842106, -0.7599999999999999), (1.368421052631579, -0.7307692307692307), (1.4210526315789473, -0.7037037037037037), (1.4736842105263157, -0.6785714285714286), (1.526315789473684, -0.6551724137931035), (1.5789473684210527, -0.6333333333333333), (1.631578947368421, -0.6129032258064516), (1.6842105263157894, -0.59375), (1.736842105263158, -0.5757575757575757), (1.7894736842105263, -0.5588235294117647), (1.8421052631578947, -0.5428571428571428), (1.894736842105263, -0.5277777777777778), (1.9473684210526314, -0.5135135135135136), (2.0, -0.5)]


** a
#+begin_src python :results output :session
## Problem 1a
problem_1a_function = euler_method(problem_1_derivative, problem_1_initial_value, 0.05)
problem_1a_y = list(map(problem_1a_function, problem_1_x_values))
problem_1a_data_set = list(zip(problem_1_x_values, problem_1a_y))
problem_1a_compare = [(problem_1_analytic_function(t) -
                       problem_1a_function(t))
                      for t in problem_1_x_values]
def problem_1a():
    print("Problem 1a compared values:", problem_1a_compare)
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
problem_1a()
#+end_src

#+RESULTS:
: Problem 1a compared values: [0.0, 0.04605786130566358, 0.048823164749769665, 0.05133736153199553, 0.05365483743428734, 0.05581773995856254, 0.057859054255661846, 0.059804830791779784, 0.061675818984271547, 0.06348867906034905, 0.06525689061341156, 0.06699144047903283, 0.06870134829226604, 0.07039407144388043, 0.07207581958713305, 0.07375180071305631, 0.0754264150283076, 0.07710340871357091, 0.07878599662485064, 0.08047696079165656]


** b
#+begin_src python :results output :session
## Problem 1b
def problem_1b():
    f_interpolated = linear_interpolation(problem_1a_data_set)
    f_analytic = problem_1_analytic_function 
    print("y(1.052) analytic:", f_analytic(1.052))
    print("y(1.052) approximated:", f_interpolated(1.052))

    print("y(1.555) analytic:", f_analytic(1.555))
    print("y(1.555) approximated:", f_interpolated(1.555))

    print("y(1.978) analytic:", f_analytic(1.978))
    print("y(1.978) approximated:", f_interpolated(1.978))

#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
problem_1b()
#+end_src

#+RESULTS:
: y(1.052) analytic: -0.9505703422053231
: y(1.052) approximated: -0.9961051669699956
: y(1.555) analytic: -0.6430868167202572
: y(1.555) approximated: -0.7094723352327039
: y(1.978) analytic: -0.5055611729019212
: y(1.978) approximated: -0.5854187864185804


** Heuns's method
#+begin_src python :results output :session
def heun_method(derivative, initial_value, stepsize):
    """ Given that 'derivative' is a function of (x,y)
    and that the 'initial_value' is a tuple of the form
    (x0, y(x0)), this method returns a function that
    approximates y using heun's method in the equation 
    dy/dx = derivative(x,y).
    """


    def y(x):
        x0, y0 = initial_value
        xk, yk = x0, y0
        while x0 <= xk < x:
            x_next = xk + stepsize 
            y_bar = yk + stepsize * derivative(xk,yk)
            y_next = yk + (stepsize / 2) * (derivative(xk, yk) +
                                            derivative(x_next, y_bar))
            xk, yk = x_next, y_next
        return yk

    
    return y
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
f = heun_method(lambda x,y: y, (0,1), 0.1)
print(f(1))
print("yello")
#+end_src

#+RESULTS:
: 2.9990593355020874
: yello


** c

#+begin_src python :results output :session
## Problem 1c
problem_1c_function = heun_method(problem_1_derivative, problem_1_initial_value, 0.05)
problem_1c_y = list(map(problem_1c_function, problem_1_x_values))
problem_1c_data_set = list(zip(problem_1_x_values, problem_1c_y))
problem_1c_compare = [(problem_1_analytic_function(t) -
                       problem_1c_function(t))
                      for t in problem_1_x_values]
def problem_1c():
    print("Problem 1a compared values:", problem_1c_compare)
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
problem_1c()
#+end_src

#+RESULTS:
: Problem 1a compared values: [0.0, -0.04112130234761635, -0.035496555767742355, -0.030681482453422948, -0.02653664985702764, -0.02295083841517853, -0.0198345164088215, -0.017115002183238914, -0.014732834112419435, -0.012639016555417992, -0.01079290899265517, -0.009160592771588538, -0.007713596250483845, -0.00642789151926515, -0.005283098788347984, -0.004261850931373878, -0.003349282526444175, -0.002532616404819832, -0.0018008271066698445, -0.0011443653991198288]


** d

#+begin_src python :results output :session
## Problem 1d
def problem_1d():
    f_interpolated = linear_interpolation(problem_1c_data_set)
    f_analytic = problem_1_analytic_function 
    print("y(1.052) analytic:", f_analytic(1.052))
    print("y(1.052) approximated:", f_interpolated(1.052))

    print("y(1.555) analytic:", f_analytic(1.555))
    print("y(1.555) approximated:", f_interpolated(1.555))

    print("y(1.978) analytic:", f_analytic(1.978))
    print("y(1.978) approximated:", f_interpolated(1.978))

#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
problem_1d()
#+end_src

#+RESULTS:
: y(1.052) analytic: -0.9505703422053231
: y(1.052) approximated: -0.9099721532805549
: y(1.555) analytic: -0.6430868167202572
: y(1.555) approximated: -0.6333668182903549
: y(1.978) analytic: -0.5055611729019212
: y(1.978) approximated: -0.5042298822557729


** Runge-Kutta

#+begin_src python :results output :session
def runge_kutta_method(derivative, initial_value, stepsize):
    """ Given that 'derivative' is a function of (x,y)
    and that the 'initial_value' is a tuple of the form
    (x0, y(x0)), this method returns a function that
    approximates y using runge kutta method in the equation 
    dy/dx = derivative(x,y).
    """


    def y(x):
        x0, y0 = initial_value
        xk, yk = x0, y0
        while x0 <= xk < x:
            k1 = derivative(xk,yk)
            k2 = derivative(xk + stepsize / 2, yk + stepsize * k1 / 2)
            k3 = derivative(xk + stepsize / 2, yk + stepsize * k2 / 2)
            k4 = derivative(xk + stepsize, yk + stepsize * k3)
            x_next = xk + stepsize 
            y_next = yk + (1/6) * stepsize * (k1 + 2 * k2 + 2 * k3 + k4)
            xk, yk = x_next, y_next
        return yk

    
    return y
#+end_src

#+RESULTS:


*** test
#+begin_src python :results output :session :tangle no
f = runge_kutta_method(lambda x,y: y, (0,1), 0.01)
print(f(1))
print("yello")
#+end_src

#+RESULTS:
: 2.718281828234403
: yello


** e

#+begin_src python :results output :session
## Problem 1e
problem_1e_function = runge_kutta_method(problem_1_derivative,
                                         problem_1_initial_value, 0.05)
problem_1e_y = list(map(problem_1e_function, problem_1_x_values))
problem_1e_data_set = list(zip(problem_1_x_values, problem_1e_y))
problem_1e_compare = [(problem_1_analytic_function(t) -
                       problem_1c_function(t))
                      for t in problem_1_x_values]
def problem_1e():
    print("Problem 1e compared values:", problem_1e_compare)
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
problem_1e()
#+end_src

#+RESULTS:
: Problem 1e compared values: [0.0, -0.04112130234761635, -0.035496555767742355, -0.030681482453422948, -0.02653664985702764, -0.02295083841517853, -0.0198345164088215, -0.017115002183238914, -0.014732834112419435, -0.012639016555417992, -0.01079290899265517, -0.009160592771588538, -0.007713596250483845, -0.00642789151926515, -0.005283098788347984, -0.004261850931373878, -0.003349282526444175, -0.002532616404819832, -0.0018008271066698445, -0.0011443653991198288]



** f

#+begin_src python :results output :session
## Problem 1f
def problem_1f():
    f_interpolated = linear_interpolation(problem_1e_data_set)
    f_analytic = problem_1_analytic_function 
    print("y(1.052) analytic:", f_analytic(1.052))
    print("y(1.052) approximated:", f_interpolated(1.052))

    print("y(1.555) analytic:", f_analytic(1.555))
    print("y(1.555) approximated:", f_interpolated(1.555))

    print("y(1.978) analytic:", f_analytic(1.978))
    print("y(1.978) approximated:", f_interpolated(1.978))

#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
problem_1f()
#+end_src

#+RESULTS:
: y(1.052) analytic: -0.9505703422053231
: y(1.052) approximated: -0.910181758813877
: y(1.555) analytic: -0.6430868167202572
: y(1.555) approximated: -0.6341732015242038
: y(1.978) analytic: -0.5055611729019212
: y(1.978) approximated: -0.5053587292691988


** problem 1 visualise


* Assignment 2

** Problem 2 header
#+begin_src python :results output :session
## Problem 2: analytic data of function
problem_2_stepsize = 0.1
problem_2_analytic_function = lambda x: 2 + 2 * x + x ** 2 - np.exp(x)
problem_2_derivative = lambda x,y: y - x ** 2
problem_2_x_values = np.linspace(0, 3.3, int(3.3 / 0.1))
problem_2_initial_value = (0,1)
problem_2_y_values = list(map(problem_2_analytic_function, problem_2_x_values))
problem_2_data = list(zip(problem_2_x_values, problem_2_y_values))

problem_2_init_orbit_x = [-0.8 ,-0.9 ,0]
problem_2_init_orbit_y = list(map(problem_2_analytic_function,
                                  problem_2_init_orbit_x))
problem_2_init_orbit = list(zip(problem_2_init_orbit_x, problem_2_init_orbit_y))
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
print("problem_2_analytic_function:", problem_2_analytic_function)
print("problem_2_x_values:", problem_2_x_values)
print("problem_2_initial_value:", problem_2_initial_value)
#print("problem_2_y_values:", problem_2_y_values)
print("problem_2_data:", problem_2_data)
#+end_src

#+RESULTS:
: problem_2_analytic_function: <function <lambda> at 0x7f4002de1b80>
: problem_2_x_values: [0.         0.10645161 0.21290323 0.31935484 0.42580645 0.53225806
:  0.63870968 0.74516129 0.8516129  0.95806452 1.06451613 1.17096774
:  1.27741935 1.38387097 1.49032258 1.59677419 1.70322581 1.80967742
:  1.91612903 2.02258065 2.12903226 2.23548387 2.34193548 2.4483871
:  2.55483871 2.66129032 2.76774194 2.87419355 2.98064516 3.08709677
:  3.19354839 3.3       ]
: problem_2_initial_value: (0, 1)
: problem_2_data: [(0.0, 1.0), (0.1064516129032258, 1.1119110686866513), (0.2129032258064516, 1.2338693250358106), (0.3193548387096774, 1.3644576090746123), (0.4258064516129032, 1.5020995796074175), (0.532258064516129, 1.64504183432775), (0.6387096774193548, 1.7913340215878444), (0.7451612903225806, 1.938806718240547), (0.8516129032258064, 2.0850468226296512), (0.9580645161290322, 2.2273701836199473), (1.064516129032258, 2.3627911552076206), (1.1709677419354838, 2.4879887313795743), (1.2774193548387096, 2.5992688771012005), (1.3838709677419354, 2.6925226281661456), (1.4903225806451612, 2.7631794846492754), (1.596774193548387, 2.8061555693210645), (1.7032258064516128, 2.8157959630023663), (1.8096774193548386, 2.7858105627896492), (1.9161290322580644, 2.7092027356129034), (2.02258064516129, 2.5781899578684406), (2.129032258064516, 2.384115540969642), (2.235483870967742, 2.117350441549368), (2.3419354838709676, 1.7671840425814125), (2.4483870967741934, 1.3217026665894362), (2.554838709677419, 0.7676544429610193), (2.661290322580645, 0.09029899660400353), (2.767741935483871, -0.726759746984019), (2.8741935483870966, -1.7017595366668168), (2.9806451612903224, -2.854986660090187), (3.087096774193548, -4.2090060439631465), (3.193548387096774, -5.788917200146763), (3.3, -7.622638920657884)]


** Problem 2 runge kutta
#+begin_src python :results output :session
## Problem 2: runge kutta
problem_2_runge_kutta = runge_kutta_method(problem_2_derivative,
                                           problem_2_initial_value,
                                           problem_2_stepsize)
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
print(problem_2_runge_kutta(1))
#+end_src

#+RESULTS:
: 2.4058325398853753

** Problem 2 Adams-Bashforth

#+begin_src python :results output :session
## Problem 2: Adams-Bashforth
def bashforth_method(derivative, initial_value_orbit, stepsize):
    """ Given that 'derivative' is a function of (x,y)
    and that the 'initial_value' is a tuple of the form
    (x0, y(x0)), this method returns a function that
    approximates y using the Adams-Bashforth method in the equation 
    dy/dx = derivative(x,y).
    """


    def y(x):
        orbit = initial_value_orbit
        while 0 <= orbit[-1][0] < x:
            (x0,y0), (x1,y1) = orbit[-2:]
            x_next = x1 + stepsize 
            y_next = (y1 + (3/2) * stepsize * derivative(x1,y1)
                      - (1/2) * stepsize * derivative(x0,y0))
            orbit.append((x_next, y_next))
            
        return orbit[-1][1]

    
    return y

## To get the adams-Bashforth method:
#f = bashforth_method( problem_2_derivative ,problem_2_init_orbit, problem_2_stepsize)
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
print(f(2))
#+end_src

#+RESULTS:
: 3.0493685924806857

* Test
#+begin_src python :results output :session :tangle no
hej = [1,2,3,4]
print(hej)
hej.append((1,2))
print(hej)
print([0,1,2,3,4][-3:])
#+end_src

#+RESULTS:
: [1, 2, 3, 4]
: [1, 2, 3, 4, (1, 2)]
: [2, 3, 4]
