#+title: Lab 6 MM5016
#+description: QR method
#+PROPERTY: header-args :tangle ./lab6.py :padline 2

* Head
#+begin_src python :results output :session
## Description
"""
The answer to task 2 of lab 6 is the function qr_decompose.
"""


from math import sqrt
#+end_src

#+RESULTS:

* Code

** Linear algebra stuff

*** Transpose
#+begin_src python :results output :session
def transpose(matrix):
    """ Transposes a square matrix. """
    n = len(matrix)
    return [[matrix[i][j] for i in range(n)] for j in range(n)]
#+end_src

#+RESULTS:

*** Dot product
#+begin_src python :results output :session
def dot_product(v,u):
    """ Takes the dot product of the vectors v and u. I.e. the inner product
    given that the coordinates are in a orthonormal basis.
    """
    n = len(v)
    return sum([v[k]*u[k] for k in range(n)])
#+end_src

#+RESULTS:

*** vector add
#+begin_src python :results output :session
def vector_add(v,u):
    """ Add vectors componentwise. """
    n = len(v)
    return [v[k] + u[k] for k in range(n)]
#+end_src

#+RESULTS:

*** vector sub
#+begin_src python :results output :session
def vector_sub(v,u):
    """ Add vectors componentwise. """
    n = len(v)
    if n == 0:
        return []
    return [v[k] - u[k] for k in range(n)]
#+end_src

#+RESULTS:

*** vector sum
#+begin_src python :results output :session
def vector_sum(list_of_vectors, size=1):
    """ Returns the sum of the list. """
    n = size
    zero = [0 for i in range(n)]
    if list_of_vectors == []:
        return zero
    else:
        n = len(list_of_vectors[0])
        zero = [0 for i in range(n)]
        return vector_add(list_of_vectors[0],
                          vector_sum(list_of_vectors[1:], size=n))
#+end_src

#+RESULTS:

**** test vector sum
#+begin_src python :results output :session :tangle no
print(vector_sum([[2,2],[3,4],[1,1]]))
#+end_src

#+RESULTS:
: [6, 7]

*** Scalar product
#+begin_src python :results output :session
def scalar_product(m,v):
    """ Takes the scalar product of the scalar m and the vector v. """
    n = len(v)
    return [m * v[k] for k in range(n)]
#+end_src

#+RESULTS:

*** Euclidean norm
#+begin_src python :results output :session
def norm(v):
    """ Returns the euclidean norm given the basis is orthonormal. """
    return sqrt(dot_product(v,v))
#+end_src

#+RESULTS:

**** test av euclidean norm
#+begin_src python :results output :session :tangle no
v = [1,1,1,1]
print(norm(v))
#+end_src

#+RESULTS:
: 2.0

*** Normalise
#+begin_src python :results output :session
def normalise(v):
    """ Normalises the vector 'v' using the euclidean norm. """
    return scalar_product(1 / norm(v), v)
#+end_src

#+RESULTS:

**** Test of normalise
#+begin_src python :results output :session
v = [0,1,1]
print(normalise(v))
#+end_src

#+RESULTS:
: [0.0, 0.7071067811865475, 0.7071067811865475]
: 0.7071067811865475

*** Projection
#+begin_src python :results output :session
def projection(u,v):
    """ Takes the projection of v on u, given that the coordinates
    are in a orthnormal basis.
    """
    scalar = dot_product(u,v) / dot_product(u,u)
    return scalar_product(scalar, u)
    
#+end_src

#+RESULTS:

*** Test of above
#+begin_src python :results output :session :tangle no
u,v = [3,3], [5,0]
print(projection(v,u))
#+end_src

#+RESULTS:
: [3.0, 0.0]

** Gram-Schmidit
#+begin_src python :results output :session
def gram_schmidt(basis):
    """ Returns an orthonormal basis. """
    n = len(basis)
    if n <= 1:
        return list(map(normalise,basis))
    else:
        tail_orthogonal_basis = gram_schmidt(basis[:-1])
        head_original_basis = basis[-1]
        project_head_on = lambda u: projection(u, head_original_basis)
        non_orthogonal_components = list(map(project_head_on,
                                             tail_orthogonal_basis))
        non_orthogonal_component = vector_sum(non_orthogonal_components)
        head_orthogonal_basis = vector_sub(head_original_basis,
                                           non_orthogonal_component)
        return tail_orthogonal_basis + [normalise(head_orthogonal_basis)]
#+end_src

#+RESULTS:



*** gram test
#+begin_src python :results output :session :tangle no
b = gram_schmidt([[3,2,3],[4,5,6],[7,8,9]])
b1, b2 = b[0], b[1]
print("product of", b1, "and", b2, ":")
print(dot_product(b1, b2) )
print("Norm of b1:", norm(b1))
print("Norm of b2:", norm(b2))
#+end_src

#+RESULTS:
: product of [0.6396021490668312, 0.42640143271122083, 0.6396021490668312] and [-0.7036791954136679, 0.6596992457003138, 0.2638796982801257] :
: 2.498001805406602e-16
: Norm of b1: 0.9999999999999999
: Norm of b2: 1.0

** QR decompose
#+begin_src python :results output :session
def qr_decompose(A):
    """ Returns a unitary matrix Q and an upper triangular matrix R
    such that A = QR.
    """
    n = len(A)
    basis_A = transpose(A)
    orthogonal_basis = gram_schmidt(basis_A)
    Q = transpose(orthogonal_basis)

    R = [[dot_product(orthogonal_basis[i], basis_A[j]) for j in range(n)]
         for i in range(n)]
    return Q, R
    
#+end_src

#+RESULTS:

*** QR decompose test
#+begin_src python :results output :session :tangle no
A = [[3,2,3], [4,5,6], [7,8,9]]
Q, R = qr_decompose(A)
Qt = transpose(Q)
print("Q is equal to:", Q)
print("R is equal to:", R)
print("QQ^t is equal to:", matrix_multiply(Q, Qt))
print("QR is equal to:", matrix_multiply(Q, R))
#+end_src

#+RESULTS:
: Q is equal to: [[0.34874291623145787, -0.9063202265545679, 0.23866718525269612], [0.46499055497527714, 0.38842295423767115, 0.79555728417574], [0.813733471206735, 0.16646698038757282, -0.5568900989230067]]
: R is equal to: [[8.602325267042627, 9.532306376993182, 11.159773319406652], [-9.325873406851315e-15, 1.4612101611798025, 1.1097798692504788], [1.7763568394002505e-15, 3.907985046680551e-14, 0.4773343705054689]]
: QQ^t is equal to: [[0.9999999999999897, -1.534883331544279e-14, 1.4516166046973922e-14], [-1.534883331544279e-14, 1.0000000000000153, -2.4980018054066022e-15], [1.4516166046973922e-14, -2.4980018054066022e-15, 0.9999999999999949]]
: QR is equal to: [[3.000000000000009, 2.000000000000019, 3.000000000000008], [3.999999999999998, 5.000000000000027, 6.000000000000024], [6.999999999999997, 7.999999999999976, 8.999999999999982]]

** Main
#+begin_src python :results output :session
def main():
    """ Solution for task 2 of lab assignment 6. """
    A = [[0,1,1], [1,1,2], [0,0,3]]
    Q, R = qr_decompose(A)
    Qt = transpose(Q)
    print("Original matrix A:", matrix_multiply(Q, R))
    print("Result of Q:", Q)
    print("Result of R:", R)
    print("Result of QQ^t:", Qt)
    print("Result of QR:", matrix_multiply(Q, R))
#+end_src

* Test
** Test av list comprehension
#+begin_src python :results output :session :tangle no
stuff = [1,2,3,4,5]
print(stuff[:4])
#+end_src

#+RESULTS:
: [1, 2, 3, 4]
** map pÃ¥ empty list
#+begin_src python :results output :session :tangle no
print(list(map(lambda x: 2*x, [])))
#+end_src

#+RESULTS:
: []
** range 1
#+begin_src python :results output :session :tangle no
print(list(range(1)))
#+end_src

#+RESULTS:
: [0]


** Gram-Schmidit old
#+begin_src python :results output :session
def gram_schmidt(basis):
    """ Returns a orthonormal basis. """
    n = len(basis)
    a = basis
    u = lambda k: a[0] if k==0 else (
        vector_sub(a[k],
                   vector_sum([projection(u(j), a[k])
                               for j in range(0,k-1)])))
    e = [scalar_product(1 / dot_product(u(k), u(k)), u(k) ) for k in range(0,n)]
    return e
#+end_src

#+RESULTS:


*** gram test
#+begin_src python :results output :session :tangle no
print(gram_schmidt([[2,0],[0,3]]))
#+end_src

#+RESULTS:

