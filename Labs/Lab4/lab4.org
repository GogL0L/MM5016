#+title: Lab 4 MM5016
#+description: Solve linear equation AX=B
#+PROPERTY: header-args :tangle ./lab4.py :padline 2

* Header
#+begin_src python :results output :session :padline 0
## Description
"""
The column vector 'X' will be symbolised as a list of size 1 lists, that is
X = [[x1], [x2] ,[x3], ... , [xn]]. An m by n matrix 'A' will be symbolised by a list of size
m consisting of lists of size n. The solution to task 4 in the lab will be the function
'gaussian_elimination'.
"""
#+end_src

* Matrix based approach

** matrix multiply
#+begin_src python :results output :session
def matrix_multiply(matrix1, matrix2):
    m = len(matrix1)
    n = len(matrix2)
    p = len(matrix2[0])
    element = lambda i,j: sum([matrix1[i][k] * matrix2[k][j]
                               for k in range(n)])
    row = lambda i: [element(i,j) for j in range(p)]
    return [row(i) for i in range(m)]
#+end_src

#+RESULTS:

** create identity 
#+begin_src python :results output :session
def create_identity(n):
    """ Creates an n by n identity matrix. """
    return [[1 if i==j else 0 for j in range(n)] for i in range(n)]
#+end_src

#+RESULTS:

** create switch
#+begin_src python :results output :session
def switch(row1, row2, n):
    """ Creates an n by n matrix which switches the rows
    row1 and row2 on a matrix if this matrix returned is multiplied
    on the left. Rows are indexed such that the first row is row 0.
    """
    I = create_identity(n)
    return [I[row2] if i==row1
            else I[row1] if i==row2
            else I[i] for i in range(n)]
#+end_src

#+RESULTS:

** add multiple
#+begin_src python :results output :session
def add_multiple_of_row_to_other_row(multiple, row, other_row, n):
    """ Creates an 'n' by 'n' matrix which if multiplied with on the
    left of another matrix, then that other matrix will add
    'multiple' times the row 'row' to the row 'other_row'.
    rows are indexed such that the first row is row 0.
    """
    I = create_identity(n)
    new_other_row = [1 if j==other_row and other_row != row
                     else multiple if j==row
                     else 0 for j in range(n)]
    return [new_other_row if i==other_row else I[i] for i in range(n)]
#+end_src

#+RESULTS:

** scale row
#+begin_src python :results output :session
def scale_row(multiple, row, n):
    """ Create an 'n' by 'n' matrix which if multiplied with on the
    left of another matrix, then that other matrix will have the
    row 'row' be mutliplied with 'multiple'.
    """
    return add_multiple_of_row_to_other_row(multiple, row, row, n)
#+end_src

#+RESULTS:

** test av allt ovanf√∂r
#+begin_src python :results output :session :tangle no
print(matrix_multiply([[1,0],[0,1]], [[3],[4]]))
print(create_identity(3))
print(switch(0,1,3))
print(add_multiple_of_row_to_other_row(3,0,1,3))
print(matrix_multiply(scale_row(3,1,3), [[1,2,3],[4,5,6],[7,8,9]]))
#+end_src

#+RESULTS:
: [[3], [4]]
: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
: [[0, 1, 0], [1, 0, 0], [0, 0, 1]]
: [[1, 0, 0], [3, 1, 0], [0, 0, 1]]
: [[1, 2, 3], [12, 15, 18], [7, 8, 9]]

** find next gaussian elimination task
#+begin_src python :results output :session
def find_next_gaussian_elimination_task(matrix):
    """ Compares with the identity matrix, to see what element should be
    focused on next and what gaussian elimination task needs to be done for
    that element. This function always returns a coordinate in the form of a 
    tuple and a string with the operation that needs to be done. It checks
    each column from left to right. In the column fix, it first checks if
    the diagonal element (the element corresponding to the 1 in the same column 
    of the identity  matrix), is equal to one. If it is a zero this function 
    searches for the closest non-zero element below, and returns the coordinate 
    for that element and the string "swap". If it is non-zero but not 1 then the 
    diagonal coordinate is returned with the string "normalise". Next it checks 
    the rest of the column, from top to bottom, to see if the elements are zero.
    If not, then the coordinate with the string "eliminate" is returned. If the 
    matrix is the identity matrix, this function returns the tuple (-1, -1) and 
    the string 'finnished'. If the determinant of the matrix is 0 then the 
    tuple (-1,-1) and the string 'failed' is returned.
    """
    n = len(matrix)
    I = create_identity(n)
    transpose = lambda matrix: [[matrix[i][j] for i in range(n)]
                                for j in range(n)]
    matrix_of_validity_of_entries = [[matrix[i][j] == I[i][j] for j in range(n)]
                                for i in range(n)]
    list_of_validity_of_columns = list(
        map(all, transpose(matrix_of_validity_of_entries)))
    try:
        column_to_fix_index = list_of_validity_of_columns.index(False)
    except ValueError:
        return (-1,-1), "finnished"

    i = column_to_fix_index
    diagonal_element = matrix[i][i]
    column = transpose(matrix)[i]
    non_zero_elements = list(map(lambda x: x!=0, column))
    non_zero_elements_except_diagonal = [False if index==i
                                         else non_zero_elements[index]
                                         for index in range(n)]
    non_zero_elements_below_diagonal = non_zero_elements[i+1:]
    if not any(non_zero_elements_below_diagonal) and diagonal_element==0:
        return (-1,-1), "failed"
    elif diagonal_element == 0:
        x,y = non_zero_elements_below_diagonal.index(True), i
        return (x,y), "swap"
    elif diagonal_element != 0 and diagonal_element != 1:
        return (i,i), "normalise"
    else:
        x,y = non_zero_elements_except_diagonal.index(True), i
        return (x,y), "eliminate"
#+end_src

#+RESULTS:

*** test: find next gaussian elimination task
#+begin_src python :results output :session :tangle no
print(find_next_gaussian_elimination_task([[1,0],[0,1]]))
#+end_src

#+RESULTS:
: ((-1, -1), 'finnished')

** Gaussian elimination
#+begin_src python :results output :session
def gaussian_elimination(A, b):
    """ If 'A' is an n by n matrix and 'b' is an n by 1 vector,
    then this function returns the n by 1 vector 'x' which solves
    the equation 'Ax = b'. Observe that the vectors element
    must be surrounded by squarebrackets, for example:
    [[1],[2],[3]] is correct and [1,2,3] is not.
    """
    n = len(b)
    I = create_identity(n)
    mult = lambda A, B: matrix_multiply(A, B)
    E = lambda m, i, j: add_multiple_of_row_to_other_row(m, i, j, n)
    S = lambda i,j: switch(i,j,n)
    M = lambda m, r: scale_row(m, r, n)

    (x,y), task = find_next_gaussian_elimination_task(A)
    if task == "finnished":
        return b
    elif task == "failed":
        raise ValueError(
            "<gaussian_elimination: determinant of A must be non-zero.>")
    elif task == "swap":
        A_prim = mult(S(x,y), A)
        b_prim = mult(S(x,y), b)
        return gaussian_elimination(A_prim, b_prim)
    elif task == "normalise":
        inverse = 1 / A[x][y]
        A_prim = mult(M(inverse, x), A)
        b_prim = mult(M(inverse, x), b)
        return gaussian_elimination(A_prim, b_prim)
    elif task == "eliminate":
        inverse = - A[x][y]
        A_prim = mult(E(inverse, y,x), A)
        b_prim = mult(E(inverse, y,x), b)
        return gaussian_elimination(A_prim, b_prim)
    else:
        print("Something went wrong. Debug:", (x,y), task)
#+end_src

#+RESULTS:

*** Gaussian elimination test
#+begin_src python :results output :session :tangle no
matrix = [[-3,-8,-5],[1,4,3],[6,10,-5]]
vector = [[3],[4],[5]]
result = gaussian_elimination(matrix, vector)
print(result)
print(matrix_multiply(matrix, result))
#+end_src

#+RESULTS:
: [[-14.72222222222222], [7.472222222222221], [-3.722222222222222]]
: [[2.9999999999999964], [4.0], [5.000000000000011]]

* Testing

** stuff
#+begin_src python :results output :session :tangle no
matrix = [[1,2,3],[4,5,6],[7,8,9]]
new_matrix = add_multiple_of_row_to_other_row(matrix, -1, 0, 1)
swapped_matrix = swap_row_with_other_row(matrix,0,0)
print(new_matrix)
print(swapped_matrix)
#+end_src

#+RESULTS:
: [[1, 2, 3], [3, 3, 3], [7, 8, 9]]
: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

** gaussian elimination
#+begin_src python :results output :session :tangle no
print(gaussian_elimination(matrix))
#+end_src

#+RESULTS:
: [2, 4, 6, [0.0, -3.0, -6.0], [0.0, -6.0, -12.0]]

** detach and join
#+begin_src python :results output :session :tangle no
a1, a2 = detach_first_column(matrix)
print(join_column_wise(a1,a2))
#+end_src

#+RESULTS:
: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

** list slicing
#+begin_src python :results output :session :tangle no
matrix = [[1,2,3],[4,5,6],[7,8,9]]
print(matrix[0:2][0:1])
print(matrix[1:])
#+end_src

#+RESULTS:
: [[1, 2, 3]]
: [[4, 5, 6], [7, 8, 9]]

** get index
#+begin_src python :results output :session :tangle no
mylist = [1,2,3,0,0,4,0]
print(mylist.index(5))
#+end_src

#+RESULTS:

** Pureness python list functions
#+begin_src python :results output :session :tangle no
def pure(mylist):
    mylist = [420]
    return mylist

static_list = [3,4,5]
print(static_list)
pure(static_list)
print(static_list)
#+end_src

#+RESULTS:
: [3, 4, 5]
: [3, 4, 5]

** List comprehension
#+begin_src python :results output :tangle no
print ([(letter, number) for letter in ['a', 'b', 'c'] for number in range(2)])
#+end_src

#+RESULTS:
: [('a', 0), ('a', 1), ('b', 0), ('b', 1), ('c', 0), ('c', 1)]

** eliminate_first column and transpose
#+begin_src python :results output :session :tangle no
matrix = [[1,2,3],[4,5,6],[7,8,9]]
print(eliminate_first_column(matrix))
print(transpose(matrix))
#+end_src

#+RESULTS:
: [[1, 2, 3], [0.0, -3.0, -6.0], [0.0, -6.0, -12.0]]
: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

** List index
#+begin_src python :results output :tangle no
mylist = [0,1,2,3,4,5]
print(mylist.index(3,4))
#+end_src

#+RESULTS:

** Map indexing
#+begin_src python :results output :tangle no
stuff = list(map(lambda x: x+3, [1,2,3]))
print(stuff.index(4))
#+end_src

#+RESULTS:
: 0

* Testar ssh f√∂r alla repos

* archive
:PROPERTIES:
:header-args: :tangle no
:END:
** Row operations

*** add multiple of row
#+begin_src python :results output :session
def add_multiple_of_row_to_other_row(matrix, multiple, row, other_row):
    """ Takes the matrix 'matrix' and returns a matrix where 'multiple' 
    times the row 'row' has been added to the row 'other_row'. The rows
    are numbered so the first row is 0.
    """
    scale_row_vector = lambda scalar, vector: [element * scalar
                                               for element in vector]
    add_row_vectors = lambda vector1, vector2: [vector1[i] + vector2[i]
                                                for i in range(len(vector1))]
    row_vector = matrix[row]
    other_row_vector = matrix[other_row]
    row_vector_scaled = scale_row_vector(multiple, row_vector)
    new_other_row_vector = add_row_vectors(other_row_vector, row_vector_scaled)

    new_matrix = [new_other_row_vector if i == other_row
                  else matrix[i] for i in range(len(matrix))]
    return new_matrix
#+end_src

#+RESULTS:

*** transpose
#+begin_src python :results output :session
def transpose(matrix):
    """ Returns the n by m transpose of the m by n matrix 'matrix'. """
    m,n = len(matrix), len(matrix[0])
    return [[matrix[i][j] for i in range(m)] for j in range(n)]
#+end_src

#+RESULTS:

*** join columnwise
#+begin_src python :results output :session
def join_column_wise(matrix1, matrix2):
    """ join two matrices with matrix1 on the left and matrix2 on the right."""
    return transpose(transpose(matrix1) + transpose(matrix2))
#+end_src

#+RESULTS:

*** detach first column
#+begin_src python :results output :session
def detach_first_column(matrix):
    """ Takes the matrix 'matrix' and returns a matrix with only the
    first column, and a matrix with the rest of the matrix 'matrix'.
    """
    first_column_as_row_vector = transpose(matrix)[0]
    rest_of_matrix_as_row_vectors = transpose(matrix)[1:]
    first_column_matrix = [[x] for x in first_column_as_row_vector]
    rest_of_matrix = transpose(rest_of_matrix_as_row_vectors)
    return first_column_matrix, rest_of_matrix
#+end_src

#+RESULTS:

*** swap rows
#+begin_src python :results output :session
def swap_row_with_other_row(matrix, row, other_row):
    """ Takes the matrix 'matrix' and returns the matrix where the rows 'row'
    and 'other_row' has been swapped. Rows are numbered so the first row is 0.
    """
    return [matrix[row] if i == other_row
            else matrix[other_row] if i == row
            else matrix[i] for i in range(len(matrix))]
#+end_src

#+RESULTS:

*** swap columns
#+begin_src python :results output :session
def swap_column_with_other_column(matrix, column, other_column):
    """ Takes the matrix 'matrix' and returns the matrix where the columns
    'column' and 'other_column' has been swapped. Columns are numbered so the 
    first column is 0.
    """
    return transpose(swap_row_with_other_row(transpose(matrix),
                                             column,
                                             other_column))
#+end_src

#+RESULTS:

*** eliminate column
#+begin_src python :results output :session
def eliminate_column(matrix, column):
    """ Takes the matrix 'matrix' and returns a matrix where the column
    'column' has been eliminated except for on the first row, and the boolean
    'sucess' which is by default True. In the case 
    where the whole column is zero, the original matrix is returned, and
    sucess is False. Columns are numbered so the first one i zero.
    """
    column = [matrix[i][column] for i in range(len(matrix))]
    try:
        column_index_range = range(len(column))
        non_zero_positions = filter(lambda row: column[row]!=0,
                                    column_index_range)
        first_non_zero_row = list(non_zero_positions)[0]
    except ValueError:
        return matrix, False

    # Getting the non_zero element of the column to the top.
    matrix = swap_row_with_other_row(matrix, 0, first_non_zero_row)

    # Range starts from one because we don't want to change the first row.
    for row in range(1,len(matrix)):
        coefficient = - matrix[row][0] / matrix[0][0]
        matrix = add_multiple_of_row_to_other_row(matrix, coefficient, 0, row)
    return matrix, True
    
#+end_src

#+RESULTS:

*** Gaussian elimination
#+begin_src python :results output :session
def gaussian_elimination(matrix):
    """ Takes the matrix 'matrix' and returns the matrix where gaussian
    elimination has been performed on it, so it is on upper triangular
    form. 
    """
    scale_row = lambda matrix, scalar, row: (
        add_multiple_of_row_to_other_row(matrix, scalar, row, row))
    # Normalises the first row, with respect to the first 
    normalise = lambda matrix: scale_row(matrix, matrix[0][0], 0)

    if len(matrix) == 1:
        return normalise(matrix)
    else:
        matrix = normalise(matrix)
        matrix,sucess = eliminate_column(matrix, 0)
        first_column, rest_of_matrix = detach_first_column(matrix)
        if sucess == True:
            first_row = matrix[0]
            rows_under = join_column_wise(first_column[1:], rest_of_matrix[1:])
            return first_row + rows_under
        
                                                                     
#+end_src

#+RESULTS:

*** Med klasser (f√∂r matrix based approach)

#+begin_src python :results output :session :tangle no
class Vector:
    def __init__(self, vector):
        self.elements = vector


    def __getitem__(self, key):
        return self.elements[key]


    def __len__(self):
        return len(self.elements)


    def __add__(self, other):
        return Vector([self[k] + other[k] for k in range(len(self))])

    
    def __mul__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            return Vector([other * element for element in self.elements])
        elif isinstance(other, Vector):
            return sum([self[k] * other[k] for k in range(len(self))])


    def __rmul__(self, other):
        return self * other

    
    def __str__(self):
        return str(self.elements)


myvector = Vector([1,2,3])
print(-1 * myvector)
print(myvector + myvector)
#+end_src

#+RESULTS:
: [-1, -2, -3]
: [2, 4, 6]

