#+title: Lab Assignment 9 (interpolation and ODE basic)
#+description: 
#+PROPERTY: header-args :tangle ./lab9.py :padline 2

* Header
#+begin_src python :results output :session
import matplotlib.pyplot as plt
import numpy as np
#+end_src

#+RESULTS:

* Assignment 1

** Linear interpolation

#+begin_src python :results output :session
def linear_interpolation(data_set):
    """ Takes a list of data points in form of tuple coordinates, that is:
    [(x0, y0), (x1, y1) ...] and returns an apporixmated function given by
    linear interpolation.
    """
    if len(data_set) <= 1:
        raise ValueError("<linear_interpolation: not enough data points>")
        
    data_set_sorted = sorted(data_set)
    if len(data_set_sorted) == 2:
        (x0, y0), (x1, y1) = data_set_sorted
        k = (y1 - y0) / (x1 - x0)
        m = y0
        interpolated_function = lambda x: k * (x - x0) + m
        return interpolated_function
    else:
        head = data_set_sorted[:2]
        head_interval_end = head[1][0] 
        tail = data_set_sorted[1:]
        head_function = linear_interpolation(head)
        tail_function = linear_interpolation(tail)
        complete_function = lambda x:( head_function(x) if x <= head_interval_end
                                       else tail_function(x))
        return complete_function
        
#+end_src

#+RESULTS:

*** Linear interpolation test
#+begin_src python :results output :session
data = [(0,0), (1,1), (2,4)]
fun = linear_interpolation(data)
print(fun(1.3))

plot_function(fun, (0,5))
#+end_src

#+RESULTS:
: 1.9000000000000001

** product
#+begin_src python :results output :session
def product(factors):
    """ Returns factor[0] * factor[1] ..."""
    if len(factors) == 0:
        return 1
    else:
        return factors[0] * product(factors[1:])
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session
print(product([1,2,3]))
#+end_src

#+RESULTS:
: 6

** Lagrange interpolating polynomial
#+begin_src python :results output :session
def lagrange_interpolation(data_set):
    """ Takes a list of data points in form of tuple coordinates, that is:
    [(x0, y0), (x1, y1) ...] and returns an apporixmated function given by
    lagrange interpolation.
    """
    data_set_sorted = sorted(data_set)
    x_points = [P[0] for P in data_set_sorted]
    y_points = [P[1] for P in data_set_sorted]
    l = lambda j, x: product([ (x-xm) / (x_points[j] - xm)
                               for xm in x_points if xm != x_points[j]])

    k = len(data_set)
    lagrange_function = lambda x : sum([y_points[j] * l(j,x) for j in range(k)])
    return lagrange_function

#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
print(lagrange_interpolation([(0,0), (2,4), (-1, 1)])(9))
#+end_src

#+RESULTS:
: 81.0

* Assignment 2

** Euler's method
#+begin_src python :results output :session
def euler_method(derivative, initial_value, stepsize):
    """ Given that 'derivative' is a function of (x,y),
    and that 'initial_value' is a tuple of the form
    (x0, y(x0)), this method returns a function that
    approximates y in the equation dy/dx = derivative(x,y).
    """
    

    def y(x):
        x0, y0 = initial_value
        if x < x0:
            step = - stepsize
            value_not_reached = x0 > x
        else:
            step = stepsize
            value_not_reached = x0 < x
            
        y_next = lambda x,y: y + step * derivative(x,y)
        iteration = 1
        while value_not_reached and iteration < 100:
            y0 = y_next(x0,y0)
            x0 += step
            print("iteration:", iteration)
            print("value not reached:", value_not_reached)
            print("x0:",x0)
            print("y0:",y0)
            iteration += 1
        return y0

    
    return y
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
f = euler_method(lambda x,y: y, (0,1), 0.2)
print(f(1))
#+end_src

#+RESULTS:
#+begin_example
iteration: 1
value not reached: True
x0: 0.2
y0: 1.2
iteration: 2
value not reached: True
x0: 0.4
y0: 1.44
iteration: 3
value not reached: True
x0: 0.6000000000000001
y0: 1.728
iteration: 4
value not reached: True
x0: 0.8
y0: 2.0736
iteration: 5
value not reached: True
x0: 1.0
y0: 2.48832
iteration: 6
value not reached: True
x0: 1.2
y0: 2.9859839999999997
iteration: 7
value not reached: True
x0: 1.4
y0: 3.5831807999999996
iteration: 8
value not reached: True
x0: 1.5999999999999999
y0: 4.299816959999999
iteration: 9
value not reached: True
x0: 1.7999999999999998
y0: 5.159780351999999
iteration: 10
value not reached: True
x0: 1.9999999999999998
y0: 6.191736422399999
iteration: 11
value not reached: True
x0: 2.1999999999999997
y0: 7.430083706879999
iteration: 12
value not reached: True
x0: 2.4
y0: 8.916100448256
iteration: 13
value not reached: True
x0: 2.6
y0: 10.6993205379072
iteration: 14
value not reached: True
x0: 2.8000000000000003
y0: 12.83918464548864
iteration: 15
value not reached: True
x0: 3.0000000000000004
y0: 15.407021574586368
iteration: 16
value not reached: True
x0: 3.2000000000000006
y0: 18.48842588950364
iteration: 17
value not reached: True
x0: 3.400000000000001
y0: 22.18611106740437
iteration: 18
value not reached: True
x0: 3.600000000000001
y0: 26.62333328088524
iteration: 19
value not reached: True
x0: 3.800000000000001
y0: 31.94799993706229
iteration: 20
value not reached: True
x0: 4.000000000000001
y0: 38.337599924474745
iteration: 21
value not reached: True
x0: 4.200000000000001
y0: 46.0051199093697
iteration: 22
value not reached: True
x0: 4.400000000000001
y0: 55.206143891243634
iteration: 23
value not reached: True
x0: 4.600000000000001
y0: 66.24737266949236
iteration: 24
value not reached: True
x0: 4.800000000000002
y0: 79.49684720339084
iteration: 25
value not reached: True
x0: 5.000000000000002
y0: 95.39621664406901
iteration: 26
value not reached: True
x0: 5.200000000000002
y0: 114.47545997288282
iteration: 27
value not reached: True
x0: 5.400000000000002
y0: 137.3705519674594
iteration: 28
value not reached: True
x0: 5.600000000000002
y0: 164.84466236095128
iteration: 29
value not reached: True
x0: 5.8000000000000025
y0: 197.81359483314154
iteration: 30
value not reached: True
x0: 6.000000000000003
y0: 237.37631379976983
iteration: 31
value not reached: True
x0: 6.200000000000003
y0: 284.8515765597238
iteration: 32
value not reached: True
x0: 6.400000000000003
y0: 341.8218918716686
iteration: 33
value not reached: True
x0: 6.600000000000003
y0: 410.1862702460023
iteration: 34
value not reached: True
x0: 6.800000000000003
y0: 492.22352429520276
iteration: 35
value not reached: True
x0: 7.0000000000000036
y0: 590.6682291542434
iteration: 36
value not reached: True
x0: 7.200000000000004
y0: 708.801874985092
iteration: 37
value not reached: True
x0: 7.400000000000004
y0: 850.5622499821104
iteration: 38
value not reached: True
x0: 7.600000000000004
y0: 1020.6746999785325
iteration: 39
value not reached: True
x0: 7.800000000000004
y0: 1224.809639974239
iteration: 40
value not reached: True
x0: 8.000000000000004
y0: 1469.7715679690868
iteration: 41
value not reached: True
x0: 8.200000000000003
y0: 1763.7258815629043
iteration: 42
value not reached: True
x0: 8.400000000000002
y0: 2116.4710578754853
iteration: 43
value not reached: True
x0: 8.600000000000001
y0: 2539.7652694505823
iteration: 44
value not reached: True
x0: 8.8
y0: 3047.7183233406986
iteration: 45
value not reached: True
x0: 9.0
y0: 3657.261988008838
iteration: 46
value not reached: True
x0: 9.2
y0: 4388.714385610606
iteration: 47
value not reached: True
x0: 9.399999999999999
y0: 5266.457262732727
iteration: 48
value not reached: True
x0: 9.599999999999998
y0: 6319.748715279273
iteration: 49
value not reached: True
x0: 9.799999999999997
y0: 7583.698458335128
iteration: 50
value not reached: True
x0: 9.999999999999996
y0: 9100.438150002154
iteration: 51
value not reached: True
x0: 10.199999999999996
y0: 10920.525780002585
iteration: 52
value not reached: True
x0: 10.399999999999995
y0: 13104.630936003101
iteration: 53
value not reached: True
x0: 10.599999999999994
y0: 15725.557123203722
iteration: 54
value not reached: True
x0: 10.799999999999994
y0: 18870.668547844467
iteration: 55
value not reached: True
x0: 10.999999999999993
y0: 22644.80225741336
iteration: 56
value not reached: True
x0: 11.199999999999992
y0: 27173.762708896033
iteration: 57
value not reached: True
x0: 11.399999999999991
y0: 32608.51525067524
iteration: 58
value not reached: True
x0: 11.59999999999999
y0: 39130.21830081029
iteration: 59
value not reached: True
x0: 11.79999999999999
y0: 46956.26196097235
iteration: 60
value not reached: True
x0: 11.99999999999999
y0: 56347.514353166815
iteration: 61
value not reached: True
x0: 12.199999999999989
y0: 67617.01722380018
iteration: 62
value not reached: True
x0: 12.399999999999988
y0: 81140.42066856023
iteration: 63
value not reached: True
x0: 12.599999999999987
y0: 97368.50480227228
iteration: 64
value not reached: True
x0: 12.799999999999986
y0: 116842.20576272673
iteration: 65
value not reached: True
x0: 12.999999999999986
y0: 140210.64691527208
iteration: 66
value not reached: True
x0: 13.199999999999985
y0: 168252.7762983265
iteration: 67
value not reached: True
x0: 13.399999999999984
y0: 201903.3315579918
iteration: 68
value not reached: True
x0: 13.599999999999984
y0: 242283.99786959015
iteration: 69
value not reached: True
x0: 13.799999999999983
y0: 290740.79744350817
iteration: 70
value not reached: True
x0: 13.999999999999982
y0: 348888.9569322098
iteration: 71
value not reached: True
x0: 14.199999999999982
y0: 418666.74831865175
iteration: 72
value not reached: True
x0: 14.39999999999998
y0: 502400.0979823821
iteration: 73
value not reached: True
x0: 14.59999999999998
y0: 602880.1175788585
iteration: 74
value not reached: True
x0: 14.79999999999998
y0: 723456.1410946302
iteration: 75
value not reached: True
x0: 14.999999999999979
y0: 868147.3693135562
iteration: 76
value not reached: True
x0: 15.199999999999978
y0: 1041776.8431762675
iteration: 77
value not reached: True
x0: 15.399999999999977
y0: 1250132.211811521
iteration: 78
value not reached: True
x0: 15.599999999999977
y0: 1500158.6541738254
iteration: 79
value not reached: True
x0: 15.799999999999976
y0: 1800190.3850085905
iteration: 80
value not reached: True
x0: 15.999999999999975
y0: 2160228.4620103086
iteration: 81
value not reached: True
x0: 16.199999999999974
y0: 2592274.15441237
iteration: 82
value not reached: True
x0: 16.399999999999974
y0: 3110728.985294844
iteration: 83
value not reached: True
x0: 16.599999999999973
y0: 3732874.782353813
iteration: 84
value not reached: True
x0: 16.799999999999972
y0: 4479449.738824575
iteration: 85
value not reached: True
x0: 16.99999999999997
y0: 5375339.686589491
iteration: 86
value not reached: True
x0: 17.19999999999997
y0: 6450407.623907389
iteration: 87
value not reached: True
x0: 17.39999999999997
y0: 7740489.148688867
iteration: 88
value not reached: True
x0: 17.59999999999997
y0: 9288586.97842664
iteration: 89
value not reached: True
x0: 17.79999999999997
y0: 11146304.374111969
iteration: 90
value not reached: True
x0: 17.999999999999968
y0: 13375565.248934362
iteration: 91
value not reached: True
x0: 18.199999999999967
y0: 16050678.298721235
iteration: 92
value not reached: True
x0: 18.399999999999967
y0: 19260813.958465483
iteration: 93
value not reached: True
x0: 18.599999999999966
y0: 23112976.75015858
iteration: 94
value not reached: True
x0: 18.799999999999965
y0: 27735572.100190293
iteration: 95
value not reached: True
x0: 18.999999999999964
y0: 33282686.520228352
iteration: 96
value not reached: True
x0: 19.199999999999964
y0: 39939223.824274026
iteration: 97
value not reached: True
x0: 19.399999999999963
y0: 47927068.58912883
iteration: 98
value not reached: True
x0: 19.599999999999962
y0: 57512482.30695459
iteration: 99
value not reached: True
x0: 19.79999999999996
y0: 69014978.7683455
69014978.7683455
#+end_example

** Euler's method 2
#+begin_src python :results output :session
def euler_method(derivative, initial_value, stepsize):
    """ Given that 'derivative' is a function of (x,y)
    and that the 'initial_value' is a tuple of the form
    (x0, y(x0)), this method returns a function that
    approximates y in the equation dy/dx = derivative(x,y).
    """
    increment_to_goal = lambda x, step, goal: (x+step if x < goal
                                               else x - step)
    y_next = lambda x, y, goal: (y + stepsize * derivative(x,y) if x < goal
                                 else y - stepsize * derivative(x,y) )

    def y(x):
        x0, y0 = initial_value
        xk, yk = x0, y0
        while x0 <= xk < x or x0 >= xk > x:
            xk = increment_to_goal(xk, stepsize, x)
            yk = y_next(xk, yk, x)
        return yk

    
    return y
#+end_src

#+RESULTS:

*** test
#+begin_src python :results output :session :tangle no
f = euler_method(lambda x,y: y, (0,1), 0.1)
print(f(1))
print("ello")
#+end_src

#+RESULTS:
: 2.33436821409
: ello

* Plot function
#+begin_src python :results output :session
def plot_function(function, interval):
    """ Plots the function oven the given interval, where the interval
    is represented by a tuple.
    """
    x_min, x_max = interval
    x = np.linspace(x_min , x_max ,100)
    y = np.array(list(map(function, x)))
    plt.plot(x,y)
    plt.show()
#+end_src

#+RESULTS:
** test
#+begin_src python :results output :session :tangle no
f = lagrange_interpolation([(0,0), (1,1), (3, 9)])
plot_function(f, (0,5))
#+end_src

#+RESULTS:

* Test
:PROPERTIES:
:header-args: :tangle no
:END:

** List slicing
#+begin_src python :results output :session
print([1,2,3,4][:2])
print([1,2,3,4][2:])
#+end_src

#+RESULTS:
: [1, 2]
: [3, 4]

** Lambda function if
#+begin_src python :results output :session
fun = lambda x: 2 if x<=2 else 3
print(fun(3))
#+end_src

#+RESULTS:
: 3

** Sorting
#+begin_src python :results output :session
print(sorted([(5,3),(2,7),(3,1)]))
#+end_src

#+RESULTS:
: [(2, 7), (3, 1), (5, 3)]

