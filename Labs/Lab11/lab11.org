#+title: Lab 11: Boundary Value Problems
#+description: 
#+PROPERTY: header-args :tangle ./lab11.py :padline 2



* Header
#+begin_src python :results output :session :padline 0
import matplotlib.pyplot as plt
import numpy as np


## Description
"""
The methods are written to output the desired function. In order to
see the solutions to all the tasks run this as a python 3 file
in a terminal.
"""
#+end_src

#+RESULTS:

* Linear algebra operation

** Description
#+begin_src python :results output :session
## Linear algebra operations
#+end_src

** matrix multiply
#+begin_src python :results output :session
def matrix_multiply(matrix1, matrix2):
    m = len(matrix1)
    n = len(matrix2)
    p = len(matrix2[0])
    element = lambda i,j: sum([matrix1[i][k] * matrix2[k][j]
                               for k in range(n)])
    row = lambda i: [element(i,j) for j in range(p)]
    return [row(i) for i in range(m)]
#+end_src

#+RESULTS:

** Transpose
#+begin_src python :results output :session
def transpose(matrix):
    """ Transposes an n by m matrix. """
    n = len(matrix)
    m = len(matrix[0])
    return [[matrix[i][j] for i in range(n)] for j in range(m)]
#+end_src

#+RESULTS:

*** Test av transpose
#+begin_src python :results output :session :tangle no
matrix = [[1,2,3],[4,5,6],[7,8,9]]
vector = [[1],[2],[3]]
print("Matrix tranposed:", transpose(matrix))
print("Vector tranposed:", transpose(vector))
#+end_src

#+RESULTS:
: Matrix tranposed: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
: Vector tranposed: [[1, 2, 3]]

** Dot product
#+begin_src python :results output :session
def dot_product(v,u):
    """ Takes the dot product of the vectors v and u. I.e. the inner product
    given that the coordinates are in a orthonormal basis.
    """
    n = len(v)
    vt = transpose(v)
    return matrix_multiply(vt,u)[0][0]
#+end_src

#+RESULTS:

*** Test av dot product
#+begin_src python :results output :session :tangle no
v = [[1], [2], [3]]
u = [[2], [1], [3]]
print(dot_product(v,u))
#+end_src

#+RESULTS:
: 13

** matrix add
#+begin_src python :results output :session
def matrix_add(A,B):
    """ Add matrices componentwise. """
    n = len(A)
    m = len(A[0])
    return [[A[i][j] + B[i][j] for j in range(m)] for i in range(n)]
#+end_src

#+RESULTS:

*** test av matrix add
#+begin_src python :results output :session :tangle no
A = [[1,2], [3,4]]
B = [[2,4], [5,6]]
print(matrix_add(A,B))
#+end_src

#+RESULTS:
: [[3, 6], [8, 10]]

** Scale
#+begin_src python :results output :session
def scale(l,A):
    """ Scales the matrix 'A' with the scalar m. """
    n = len(A)
    m = len(A[0])
    return [[l * A[i][j] for j in range(m)] for i in range(n)]
#+end_src

#+RESULTS:

*** Test av scalar product
#+begin_src python :results output :session :tangle no
A = [[1,2], [3,4]]
v = [[2], [3]]
print ("2 times A:", scale(-2, A))
print ("3 times v:", scale(3, v))
#+end_src

#+RESULTS:
: 2 times A: [[-2, -4], [-6, -8]]
: 3 times v: [[6], [9]]

** matrix sub
#+begin_src python :results output :session
def matrix_sub(A,B):
    """ Add vectors componentwise. """
    negative_B = scale(-1, B)
    return matrix_add(A, negative_B)
#+end_src

#+RESULTS:

*** Test
#+begin_src python :results output :session :tangle no
A = [[1,2], [3,4]]
B = [[0,2], [4,1]]
print(matrix_sub(A,B))
#+end_src

#+RESULTS:
: [[1, 0], [-1, 3]]

** Euclidean norm
#+begin_src python :results output :session
def norm(A):
    """ Returns the euclidean norm given the basis is orthonormal. """
    return sqrt(dot_product(A,A))
#+end_src

#+RESULTS:

*** test av euclidean norm
#+begin_src python :results output :session :tangle no
A = [[3], [0], [4]]
print(norm(A))
#+end_src

#+RESULTS:
: 5.0

** Normalise
#+begin_src python :results output :session
def normalise(v):
    """ Normalises the vector 'v' using the euclidean norm. """
    return scale(1 / norm(v), v)
#+end_src

#+RESULTS:

*** Test of normalise
#+begin_src python :results output :session
v = [[ 0 ],[ 1 ],[ 1 ]]
print(normalise(v))
#+end_src

#+RESULTS:
: [[0.0], [0.7071067811865475], [0.7071067811865475]]

** Projection
#+begin_src python :results output :session
def projection(u,v):
    """ Takes the projection of v on u, given that the coordinates
    are in a orthnormal basis.
    """
    scalar = dot_product(u,v) / dot_product(u,u)
    return scale(scalar, u)
    
#+end_src

#+RESULTS:

** Test of above
#+begin_src python :results output :session :tangle no
u,v = [[ 3 ],[ 3 ]], [[ 5 ],[ 0 ]]
print(projection(v,u))
#+end_src

#+RESULTS:
: [[3.0], [0.0]]

* Code

** Tridiagonal solver
#+begin_src python :results output :session
def tridiagonal_elimination(A,b):
    """ Returns the solution x to the equation Ax = b,
    where A is an n by n tridiagonal matrix and
    b is an n dimensional column vector.
    """
    pass
#+end_src

** Shooting method

** Finite difference method
#+begin_src python :results output :session
def finite_difference_method(p, q, r, ya, yb, interval, stepsize):
    """ Numerically solves the function y(x) from the equation 
    y''(x) = p(x) y' + q(x) y + r(x) with boundary values y(a) = ya
    and y(b) = yb, with the specified stepsize, in the interval given
    as a tuple (left, right) symbolising that x ranges from
    left <= x <= right. This function then returns a list of x values
    partitioned according to the interval and stepsize aswell as a corresponding 
    list of y values.
    """
    pass
#+end_src

** Main

