#+title: Lab 11: Boundary Value Problems
#+description: 
#+PROPERTY: header-args :tangle ./lab11.py :padline 2



* Header
#+begin_src python :results output :session :padline 0
import matplotlib.pyplot as plt
import numpy as np


## Description
"""
The methods are written to output the desired function. In order to
see the solutions to all the tasks run this as a python 3 file
in a terminal.
"""
#+end_src

#+RESULTS:

* Linear algebra från lab 4

** matrix multiply
#+begin_src python :results output :session
def matrix_multiply(matrix1, matrix2):
    m = len(matrix1)
    n = len(matrix2)
    p = len(matrix2[0])
    element = lambda i,j: sum([matrix1[i][k] * matrix2[k][j]
                               for k in range(n)])
    row = lambda i: [element(i,j) for j in range(p)]
    return [row(i) for i in range(m)]
#+end_src

#+RESULTS:

** test av allt ovanför
#+begin_src python :results output :session :tangle no
print(matrix_multiply([[1,0],[0,1]], [[3],[4]]))
print(create_identity(3))
print(switch(0,1,3))
print(add_multiple_of_row_to_other_row(3,0,1,3))
print(matrix_multiply(scale_row(3,1,3), [[1,2,3],[4,5,6],[7,8,9]]))
#+end_src

#+RESULTS:
: [[3], [4]]
: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
: [[0, 1, 0], [1, 0, 0], [0, 0, 1]]
: [[1, 0, 0], [3, 1, 0], [0, 0, 1]]
: [[1, 2, 3], [12, 15, 18], [7, 8, 9]]

* Code

** Tridiagonal solver
#+begin_src python :results output :session
def tridiagonal_elimination(A,b):
    """ Returns the solution x to the equation Ax = b,
    where A is an n by n tridiagonal matrix and
    b is an n dimensional column vector. Algorithm copied
    from wikipedia.
    """
    n = len(b)
    a = lambda i: A[i][i-1]
    b = lambda i: A[i][i]
    c = lambda i: A[i][i+1]


    def c_prim(i):
        if i == 0:
            return c(i) / b(i)
        else:
            return c(i) / (b(i) - a(i) * c_prim(i-1))


    def d_prim(i):
        if i == 0:
            return d(i) / b(i)
        else:
            return (d(i) - a(i) * d_prim(i-1)) / (b(i) - a(i) * c_prim(i-1))


    def x(i):
        if i == n-1:
            return d_prim(i)
        else:
            return d_prim(i) - c_prim(i) * x(i+1)


    x_vector = transpose([x(i) for i in range(n)])
    return x_vector
#+end_src

*** test
#+begin_src python :results output :session :tangle no
matrix = [[2,3,0,0], [5,7,11,0], [0, 13, 17, 23], [0,0,4,6]]
vector = [[1], [2], [3], [4]]
x = tridiagonal_elimination(matrix, vector)
print("x:", x)
print("vector:", vector)
print("matrix times x:", matrix_multiply(matrix, vector))
#+end_src

** Main

