#+title: Lab assignment 3 MM5016
#+description: Numerical integration
#+PROPERTY: header-args :tangle ./lab2.py 

* Subroutines 

** Partition interval
#+begin_src python :results output :session
def partition_interval(start, end, number_of_partitions):
    """ Divides the interval start<= x <= end into 
    ammount_of_partiitions ammount of partitions, of the same size.
    The return value, is a list of the partitioned intervals, symbolysed
    by tuples.
    """
    partition_size = (end - start) / number_of_partitions
    intervals = [(i, i + partition_size) for i in range(start,
                                                        end,
                                                        partition_size)]
    return intervals


#+end_src


** Trapezoidal integration

#+begin_src python :results output :session
def trapezoidal_integration(function, start, end, number_of_partitions):
    """ Numerically integrates function(x) over the interval 
    start <= x <= end using the trapezoidal rule. number_of_partitions
    symbolises the ammount of partitioned intervals the we will use the
    trapezoidal rule to estimate the area.
    """
    # From result (7) in the reference material
    trapezoidal_rule = lambda f,a,b = (b-a) * (f(a) + f(b)) /2
    intervals
#+end_src


** Simpson Integration


* Task 1

* Task 2

* Test 

** List into even chunks (intervals in this case)
#+begin_src python :results output :tangle no
numbers = list(range(6))
intervals = [[i,i+1] for i in numbers[:-1]]
dx = 2
intervals2 = [(i,i+dx) for i in range(0,6,dx)]

print ("Numbers:",numbers)
print ("Intervals:",intervals)
print ("Intervals2:",intervals2)

def partition_interval(start, end, ammount_of_partitions):
    """ Divides the interval start<= x <= end into 
    ammount_of_partiitions ammount of partitions, of the same size.
    The return value, is a list of the partitioned intervals, symbolysed
    by tuples, and the partition size.
    """
    partition_size = (end - start) / ammount_of_partitions
    intervals = [(i, i + partition_size) for i in range(start,
                                                        end,
                                                        partition_size)]
    return intervals, partition_size
#+end_src

#+RESULTS:
: Numbers: [0, 1, 2, 3, 4, 5]
: Intervals: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]
: Intervals2: [(0, 2), (2, 4), (4, 6)]
